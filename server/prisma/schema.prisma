generator client {
  provider = "prisma-client-js"
}

generator typegraphql {
  provider = "typegraphql-prisma"
  output   = "../prisma/generated/type-graphql"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String                @id @default(uuid())
  name             String?
  email            String                @unique
  createdAt        DateTime              @default(now())
  updatedAt        DateTime              @updatedAt
  emailVerified    Boolean               @default(false)
  /// @TypeGraphQL.omit(output: true)
  password         String
  role             UserRole              @default(NORMAL)
  picture          String?
  createdPlaylists Playlist[]
  createdSongs     Song[]
  createdPosts     UserPost[]
  profile          UserProfile?
  createdComments  UserProfileComments[]
}

model UserProfile {
  id           String                 @id @unique
  userId       String                 @unique
  user         User                   @relation(fields: [userId], references: [id])
  favPlaylists UserFavoritePlaylists?
  favSongs     UserFavoriteSongs?
  posts        UserPost[]
  comments     UserProfileComments[]
}

model UserFavoriteSongs {
  id            String      @id @default(uuid())
  userProfileId String      @unique
  userProfile   UserProfile @relation(fields: [userProfileId], references: [id])
  songs         Song[]
}

model UserFavoritePlaylists {
  id            String      @id @default(uuid())
  userProfileId String      @unique
  userProfile   UserProfile @relation(fields: [userProfileId], references: [id])
  playlists     Playlist[]
}

model UserPost {
  id            Int          @id @default(autoincrement())
  authorId      String
  title         String       @db.VarChar(255)
  content       String
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  userProfileId String?
  author        User         @relation(fields: [authorId], references: [id])
  userProfile   UserProfile? @relation(fields: [userProfileId], references: [id])
}

model UserProfileComments {
  id            Int          @id @default(autoincrement())
  authorId      String
  content       String       @db.VarChar(255)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  userProfileId String?
  author        User         @relation(fields: [authorId], references: [id])
  userProfile   UserProfile? @relation(fields: [userProfileId], references: [id])
}

model Playlist {
  id                      String                 @id @default(uuid())
  title                   String                 @db.VarChar(64)
  authorId                String
  createdAt               DateTime               @default(now())
  updatedAt               DateTime               @updatedAt
  userFavoritePlaylistsId String?
  author                  User                   @relation(fields: [authorId], references: [id])
  userFavoritePlaylists   UserFavoritePlaylists? @relation(fields: [userFavoritePlaylistsId], references: [id])
}

model Song {
  id                  String             @id @default(uuid())
  title               String             @db.VarChar(64)
  authorId            String
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
  userFavoriteSongsId String?
  author              User               @relation(fields: [authorId], references: [id])
  UserFavoriteSongs   UserFavoriteSongs? @relation(fields: [userFavoriteSongsId], references: [id])
}

enum UserRole {
  NORMAL
  MODERATOR
  ADMIN
}
